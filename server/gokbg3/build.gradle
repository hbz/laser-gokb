import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
        // Experiment with guide from http://guides.grails.org/grails-as-docker-container/guide/index.html
        classpath "com.bmuschko:gradle-docker-plugin:3.2.5" 
    }
}

version "8.0.0"
group "gokbg3"

apply plugin:"eclipse"
apply plugin:"idea"
// apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"com.energizedwork.idea-project-components"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.bmuschko.docker-remote-api"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://nexus.k-int.com/content/repositories/releases" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"

    compile 'org.grails.plugins:spring-security-core:3.2.1'
    compile 'org.grails.plugins:spring-security-acl:3.2.1'
    compile 'org.grails.plugins:spring-security-ui:3.1.2'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.9'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.13'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.9'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.16.1'
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    compile 'org.elasticsearch:elasticsearch:5.2.0'
    compile 'org.elasticsearch.client:transport:5.2.0'
    compile 'org.apache.logging.log4j:log4j-api:2.7'
    compile 'org.apache.logging.log4j:log4j-core:2.7'
    compile 'org.apache.tika:tika-core:1.17'
    compile 'org.grails.plugins:grails-executor:0.4'


    // This  is for rest integration tests -  see more at
    //  http://guides.grails.org/grails-controller-testing/guide/index.html
    //  and https://github.com/grails-plugins/grails-rest-client-builder
    compile 'org.grails:grails-datastore-rest-client'


    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.1'
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    assets 'com.bertramlabs.plugins:less-asset-pipeline:2.14.8'
    
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"
    testRuntime 'com.bertramlabs.plugins:less-asset-pipeline:2.14.8'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

webdriverBinaries {
    chromedriver '2.32'
    geckodriver '0.18.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
    excludes = [
      '**/_*.less',
      'gokb/themes/*.less',
      'gokb/themes/**/*.less',
      'bootstrap/*.less',
      'bootstrap/**/*.less'
    ]
    includes = [
      'webfonts/*',
      'gokb/themes/*/theme.less',
      'bootstrap/bootstrap.less'
    ]
}

ext {
    dockerTag = "grails-sample/${project.name}:${project.version}".toLowerCase() 
    dockerBuildDir = mkdir("${buildDir}/docker") 
}

task prepareDocker(type: Copy, dependsOn: assemble) { 
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from project.jar

    into dockerBuildDir
}

task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) { 
    description = 'Create a Dockerfile file'
    group = 'Docker'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:8u151-jdk-alpine'
    maintainer 'John Doe "john.doe@example.com"'

    exposePort 8080

    workingDir '/app'

    copyFile jar.archiveName, 'application.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh' 
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh' 
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) { 
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    tag = dockerTag
}
